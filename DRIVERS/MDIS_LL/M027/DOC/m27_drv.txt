Function Description
====================
Mon May  3 13:59:52 CEST 2004
 
Overview of all Functions
-------------------------

M27_GetEntry           - Initialize drivers jump table 
M27_Init               - Allocate and return ll handle, initialize hardware 
M27_Exit               - De-initialize hardware and cleanup memory 
M27_Read               - Reads value from device 
M27_Write              - Write value to device 
M27_SetStat            - Set driver status 
M27_GetStat            - Get driver status 
M27_BlockRead          - Read data block from device 
M27_BlockWrite         - Write data block to device 
M27_Irq                - Interrupt service routine 
M27_Info               - Get information about hardware and driver requirements. 
Ident                  - Return ident string 
Cleanup                - Close all handles, free memory and return error code 
 
Low-level driver for M27, M28 and M81 M-Modules
===============================================

The M27/M28/M81 module is a 16-bit binary output module.
The module does not support interrupts.

The driver handles the output ports as 16 channels.
The state of the channels can be read.
   
The driver does not support buffers.

Required: ---
Switches: _ONE_NAMESPACE_PER_DRIVER_


Function M27_GetEntry()
-----------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        void LL_GetEntry( LL_ENTRY* drvP )
    #else
        void M27_GetEntry( LL_ENTRY* drvP )
    #endif

Description:
    Initialize drivers jump table

Input:
    ---

Output:
    drvP  pointer to the initialized jump table structure


Function M27_Init()
-------------------

Syntax:
    int32 M27_Init(
        DESC_SPEC       *descP,
        OSS_HANDLE      *osHdl,
        MACCESS         *ma,
        OSS_SEM_HANDLE  *devSemHdl,
        OSS_IRQ_HANDLE  *irqHdl,
        LL_HANDLE       **llHdlP
    )

Description:
    Allocate and return ll handle, initialize hardware

    The function resets all channels.

    The following descriptor keys are used:

    Deskriptor key        Default          Range
    --------------------  ---------------  -------------
    DEBUG_LEVEL_DESC      OSS_DBG_DEFAULT  see dbg.h
    DEBUG_LEVEL           OSS_DBG_DEFAULT  see dbg.h
    ID_CHECK              1                0..1 

Input:
    descSpec   pointer to descriptor data
    osHdl      oss handle
    ma         hw access handle
    devSemHdl  device semaphore handle
    irqHdl     irq handle

Output:
    llHdlP     ptr to low level driver handle
    return     success (0) or error code


Function M27_Exit()
-------------------

Syntax:
    int32 M27_Exit(
       LL_HANDLE    **llHdlP
    )

Description:
    De-initialize hardware and cleanup memory

    The function resets all channels.

Input:
    llHdlP    ptr to low level driver handle

Output:
    return    success (0) or error code


Function M27_Read()
-------------------

Syntax:
    int32 M27_Read(
        LL_HANDLE *llHdl,
        int32 ch,
        int32 *valueP
    )

Description:
    Reads value from device

    The function reads the state of the current channel.
    Bit 0 of '*valueP' specify the state (0=reset, 1=set).

Input:
    llHdl    ll handle
    ch       current channel

Output:
    valueP   read value
    return   success (0) or error code


Function M27_Write()
--------------------

Syntax:
    int32 M27_Write(
        LL_HANDLE *llHdl,
        int32 ch,
        int32 value
    )

Description:
    Write value to device

    The function sets the current channel, if value<>0.
    The function resets the current channel, if value=0.

Input:
    llHdl    ll handle
    ch       current channel
    value    value to write 

Output:
    return   success (0) or error code


Function M27_SetStat()
----------------------

Syntax:
    int32 M27_SetStat(
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        INT32_OR_64 value32_or_64
    )

Description:
    Set driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_LL_DEBUG_LEVEL     driver debug level         see oss.h
    M_LL_CH_DIR          direction of curr chan     M_CH_INOUT

Input:
    llHdl				ll handle
    code				status code
    ch					current channel
    value32_or_64		data or
               ptr to block data struct (M_SG_BLOCK)  (*)
    (*) = for block status codes

Output:
    return     success (0) or error code


Function M27_GetStat()
----------------------

Syntax:
    int32 M27_GetStat(
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        INT32_OR_64 *value32_or_64P
    )

Description:
    Get driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_LL_DEBUG_LEVEL     driver debug level         see oss.h
    M_LL_CH_NUMBER       number of channels         16
    M_LL_CH_DIR          direction of curr chan     M_CH_INOUT
    M_LL_CH_LEN          length of curr chan [bits] 1
    M_LL_CH_TYP          description of curr chan   M_CH_BINARY
    M_LL_ID_CHECK        eeprom is checked          0..1
    M_LL_ID_SIZE         eeprom size [bytes]        128
    M_LL_BLK_ID_DATA     eeprom raw data            -
    M_MK_BLK_REV_ID      ident function table ptr   -

Input:
    llHdl				ll handle
    code				status code
    ch					current channel
    value32_or_64P      ptr to block data struct (M_SG_BLOCK)  (*) 
    (*) = for block status codes

Output:
    valueP     data ptr or
               ptr to block data struct (M_SG_BLOCK)  (*) 
    return     success (0) or error code
    (*) = for block status codes


Function M27_BlockRead()
------------------------

Syntax:
    int32 M27_BlockRead(
         LL_HANDLE *llHdl,
         int32     ch,
         void      *buf,
         int32     size,
         int32     *nbrRdBytesP
    )

Description:
    Read data block from device

    Read channels 0..('size'-1) into 'buf'.
    Channels will be read in rising order (0..size-1).

    Buffer modes:
       The function always reads from the hardware.

    Buffer structure:
       The data buffer uses one byte per channel:

       +---------+
       |  byte 0 |  channel 0
       +---------+
       |  byte 1 |  channel 1 
       +---------+
       |   ...   |   
       +---------+
       |  byte n |  channel 'size'-1  
       +---------+

    Byte layout:
       Bit 0 shows the state of the channel: 

       Bit    7 6 5 4 3 2 1 0
       Value  0 0 0 0 0 0 0 x
                            |
                            x=1 : channel set
                            x=0 : channel reseted

Input:
    llHdl        ll handle
    ch           current channel
    buf          data buffer
    size         data buffer size  (0..16)

Output:
    nbrRdBytesP  number of read bytes (0..16)
    return       success (0) or error code


Function M27_BlockWrite()
-------------------------

Syntax:
    int32 M27_BlockWrite(
         LL_HANDLE *llHdl,
         int32     ch,
         void      *buf,
         int32     size,
         int32     *nbrWrBytesP
    )

Description:
    Write data block to device

    Write channels 0..('size'-1) into 'buf'.
    Channels will be written in rising order (0..size-1).

    Buffer modes:
       The function always writes from the hardware.

    Buffer structure:
       The data buffer uses one byte per channel:

       +---------+
       |  byte 0 |  channel 0
       +---------+
       |  byte 1 |  channel 1 
       +---------+
       |   ...   |   
       +---------+
       |  byte n |  channel 'size'-1  
       +---------+

    Byte layout:
       If any bit is set, than the channel will be set.
       If all bits are 0, than the channel will be reseted.

Input:
    llHdl        ll handle
    ch           current channel
    buf          data buffer
    size         data buffer size (0..16)

Output:
    nbrWrBytesP  number of written bytes (0..16)
    return       success (0) or error code


Function M27_Irq()
------------------

Syntax:
    int32 M27_Irq(
       LL_HANDLE *llHdl
    )

Description:
    Interrupt service routine

    Unused - the module supports no interrupt.

Input:
    llHdl    ll handle

Output:
    return   LL_IRQ_DEVICE    irq caused from device
             LL_IRQ_DEV_NOT   irq not caused from device
             LL_IRQ_UNKNOWN   unknown


Function M27_Info()
-------------------

Syntax:
    int32 M27_Info(
       int32  infoType,
       ...
    )

Description:
    Get information about hardware and driver requirements.

    Following info codes are supported:

    Code                      Description
    ------------------------  -----------------------------
    LL_INFO_HW_CHARACTER      hardware characteristics
    LL_INFO_ADDRSPACE_COUNT   nr of required address spaces
    LL_INFO_ADDRSPACE         address space information
    LL_INFO_IRQ               interrupt required
    LL_INFO_LOCKMODE          process lock mode required

    The LL_INFO_HW_CHARACTER code returns all address and 
    data modes (OR'ed), which are supported from the
    hardware (MDIS_MAxx, MDIS_MDxx).

    The LL_INFO_ADDRSPACE_COUNT code returns the number
    of address spaces used from the driver.

    The LL_INFO_ADDRSPACE code returns information about one
    specific address space (MDIS_MAxx, MDIS_MDxx). The returned 
    data mode represents the widest hardware access used from 
    the driver.

    The LL_INFO_IRQ code returns, if the driver supports an
    interrupt routine (TRUE or FALSE).

    The LL_INFO_LOCKMODE code returns, which process locking
    mode is required from the driver (LL_LOCK_xxx).

Input:
    infoType     info code
    ...          argument(s)

Output:
    return       success (0) or error code


Function Ident()
----------------

Syntax:
    static char* Ident( void )

Description:
    Return ident string

Input:
    -

Output:
    return  ptr to ident string


Function Cleanup()
------------------

Syntax:
    static int32 Cleanup(
       LL_HANDLE    *llHdl,
       int32        retCode
    )

Description:
    Close all handles, free memory and return error code
    NOTE: The ll handle is invalid after calling this function

Input:
    llHdl      ll handle
    retCode    return value

Output:
    return     retCode

